import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

import scala.annotation.tailrec

class Q0001_0010Spec extends AnyFlatSpec with Matchers {

  it should "Q0001" in {
    /**
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
     * The sum of these multiples is 23.
     *
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    def sum3or5(n: Int) = {
      (1 to n - 1).foldLeft(0) {
        (acc, i) => if (i % 3 == 0 || i % 5 == 0) acc + i else acc
      }
    }

    sum3or5(10) shouldBe 23
    sum3or5(1000) shouldBe 233168
  }

  it should "Q0002" in {
    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */
    import Fibo._
    fibo(3) shouldBe 3
    fibo(4) shouldBe 5
    fibo(10) shouldBe 89

    fibs().take(10) shouldBe LazyList[BigInt](0, 1, 1, 2, 3, 5, 8, 13, 21, 34)
    val s = fibs().takeWhile(_ < 4000000).filter(_ % 2 == 0).sum
    s shouldBe 4613732
  }

  it should "Q0003" in {
    /**
     * The prime factors of 13195 are 5, 7, 13 and 29.
     *
     * What is the largest prime factor of the number 600851475143 ?
     */
    //    import Prime._
    //    primes.takeWhile(_ < 20) shouldBe LazyList(2, 3, 5, 7, 11, 13, 17, 19)
    //
    //    var n = 600851475143L
    //    var i = 1
    //    var pMax = 2
    //    while (n != 1) {
    //      val p = primes.take(i).last
    //      if (n % p == 0) {
    //        n = n/p
    //        pMax = p
    //      }
    //      i = i+1
    //    }
    //
    //    pMax shouldBe 6857

    def factor(n: BigInt, i: Int): List[BigInt] = {
      if (i < n) {
        if (n % i == 0) {
          List(BigInt(i)) ++ factor(n / i, i)
        } else {
          factor(n, i + 1)
        }
      } else {
        List(n)
      }
    }

    factor(6, 2) shouldBe List(2, 3)
    factor(15, 2) shouldBe List(3, 5)
    factor(17 * 13, 2) shouldBe List(13, 17)
    factor(600851475143L, 2) shouldBe List(71, 839, 1471, 6857)

  }

  it should "Q0004" in {
    /**
     * A palindromic number reads the same both ways.
     * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
     *
     * Find the largest palindrome made from the product of two 3-digit numbers.
     */
    def isPalindromic(n: Int) = {
      def nToList(n: Int): List[Int] = if (n <= 9) List(n) else n % 10 :: nToList(n / 10)

      val list = nToList(n)
      list == list.reverse
    }

    isPalindromic(0) shouldBe true
    isPalindromic(1) shouldBe true
    isPalindromic(22) shouldBe true
    isPalindromic(121) shouldBe true
    isPalindromic(1000) shouldBe false

    val a = Range(999, 100, -1)
    val b = Range(999, 100, -1)
    val p = for {
      x <- a
      y <- b
    } yield (x * y)

    val found = p.filter(isPalindromic).max
    found shouldBe 906609


  }

  it should "Q0005" in {
    /**
     * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
     *
     * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     */
    import Prime._
    val step = primes.takeWhile(_ < 20).product

    def numbers(start: Int): LazyList[Int] = start #:: numbers(start + 1)

    def dividableByAll(n: Int): Boolean = Range(1, 21).forall(n % _ == 0)

    val found = numbers(1).takeWhile(i => !dividableByAll(i * step))
    val result = (found.max + 1) * step
    found shouldBe LazyList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
    result shouldBe 232792560
  }

  it should "Q0006" in {
    /**
     * The sum of the squares of the first ten natural numbers is,
     *
     * 1^2+2^2+...+10^2=385
     * The square of the sum of the first ten natural numbers is,
     *
     * (1+2+...+10)^2=552=3025
     * Hence the difference between the sum of the squares of the first ten natural numbers
     * and the square of the sum is 3025−385=2640.
     *
     * Find the difference between the sum of the squares of the first one hundred natural numbers and
     * the square of the sum.
     */
    val list: List[Int] = Range(1, 101).toList
    val sum = list.sum
    val diff = sum * sum - list.map(e => e * e).sum
    diff shouldBe 25164150
  }

  it should "Q0007" in {
    /**
     * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
     *
     * What is the 10001st prime number?
     */
    import Prime._
    primes.take(10001).last shouldBe 104743
  }

  it should "Q0008" in {
    /**
     * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
     *
     * 73167176531330624919225119674426574742355349194934
     * 96983520312774506326239578318016984801869478851843
     * 85861560789112949495459501737958331952853208805511
     * 12540698747158523863050715693290963295227443043557
     * 66896648950445244523161731856403098711121722383113
     * 62229893423380308135336276614282806444486645238749
     * 30358907296290491560440772390713810515859307960866
     * 70172427121883998797908792274921901699720888093776
     * 65727333001053367881220235421809751254540594752243
     * 52584907711670556013604839586446706324415722155397
     * 53697817977846174064955149290862569321978468622482
     * 83972241375657056057490261407972968652414535100474
     * 82166370484403199890008895243450658541227588666881
     * 16427171479924442928230863465674813919123162824586
     * 17866458359124566529476545682848912883142607690042
     * 24219022671055626321111109370544217506941658960408
     * 07198403850962455444362981230987879927244284909188
     * 84580156166097919133875499200524063689912560717606
     * 05886116467109405077541002256983155200055935729725
     * 71636269561882670428252483600823257530420752963450
     *
     * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
     */

    val s = "73167176531330624919225119674426574742355349194934" +
      "96983520312774506326239578318016984801869478851843" +
      "85861560789112949495459501737958331952853208805511" +
      "12540698747158523863050715693290963295227443043557" +
      "66896648950445244523161731856403098711121722383113" +
      "62229893423380308135336276614282806444486645238749" +
      "30358907296290491560440772390713810515859307960866" +
      "70172427121883998797908792274921901699720888093776" +
      "65727333001053367881220235421809751254540594752243" +
      "52584907711670556013604839586446706324415722155397" +
      "53697817977846174064955149290862569321978468622482" +
      "83972241375657056057490261407972968652414535100474" +
      "82166370484403199890008895243450658541227588666881" +
      "16427171479924442928230863465674813919123162824586" +
      "17866458359124566529476545682848912883142607690042" +
      "24219022671055626321111109370544217506941658960408" +
      "07198403850962455444362981230987879927244284909188" +
      "84580156166097919133875499200524063689912560717606" +
      "05886116467109405077541002256983155200055935729725" +
      "71636269561882670428252483600823257530420752963450"
    val list: List[Long] = s.toCharArray.map(c => (c - '0')*1L).toList

    /**
     *
     * @param input the list
     * @param len length of adjacent numbers
     * @param preMax existing max product
     * @return
     */
    def maxProductAdj(input: List[Long], len: Int, preMax: Long): Long = input match {
      case Nil => preMax
      case h::t =>
        val curMax = 1L*h*t.take(len-1).product
        maxProductAdj(t, len, math.max(preMax, curMax))
    }

    maxProductAdj(list, 4, 1) shouldBe 5832L
    maxProductAdj(list, 13, 1L) shouldBe 23514624000L
  }

  it should "Q0009" in {
    /**
     * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
     *
     * a2 + b2 = c2
     * For example, 32 + 42 = 9 + 16 = 25 = 52.
     *
     * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
     * Find the product abc.
     */
    val l = for {
      c <- Range(1, 500)
      b <- Range(1, 1000-c-1)
    } yield (c, b)

    def isPythagorean(cb: (Int, Int)): Boolean = cb match {
      case (c, b) =>
        val a = 1000-c-b
        a*a + b*b == c*c
    }
    l.find(isPythagorean) shouldBe Some((425,200))

    val product = l.find(isPythagorean) match {
      case None => -1
      case Some((c, b))=> c * b * (1000-c-b)
    }

    product shouldBe 31875000
  }

  it should "Q0010" in {
    import Prime._
    val sum = primes.takeWhile(_ < 2000000).foldLeft(0L)((acc, e) => e+acc)
    sum shouldBe 142913828922L
  }
}
